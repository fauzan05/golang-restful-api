// Code generated by Wire. DO NOT EDIT.

//go:generate go run -mod=mod github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package simple

import (
	"github.com/google/wire"
	"io"
	"os"
)

// Injectors from injector.go:

func InitializedService(isError bool, word string) (*SimpleService, error) {
	simpleRepository := NewSimpleRepository(isError, word)
	simpleService, err := NewSimpleService(simpleRepository)
	if err != nil {
		return nil, err
	}
	return simpleService, nil
}

func InitializedDatabase() *DatabaseRepository {
	databaseMySQL := NewDatabaseMySQL()
	databaseMongoDB := NewDatabaseMongoDB()
	databaseRepository := NewDatabaseRepository(databaseMySQL, databaseMongoDB)
	return databaseRepository
}

func InitializedCarOwnerService(Type2 Type, Speed2 Speed, Name2 Name, Age2 Age) *CarOwnerService {
	carRepository := NewCarRepository(Type2, Speed2)
	carService := NewCarService(carRepository)
	ownerRepository := NewOwnerRepository(Name2, Age2)
	ownerService := NewOwnerService(ownerRepository)
	carOwnerService := NewCarOwnerService(carService, ownerService)
	return carOwnerService
}

func InitializedHelloService(Age2 string) *HelloService {
	sayHelloImpl := NewSayHelloImpl(Age2)
	helloService := NewHelloService(sayHelloImpl)
	return helloService
}

func InitializedCarOwner(car Type, name Name) *CarOwner {
	simpleCar := NewCar(car)
	owner := NewOwner(name)
	carOwner := &CarOwner{
		Car:   simpleCar,
		Owner: owner,
	}
	return carOwner
}

// langsung menggunakan struct-nya tanpa harus membuat providernya
func InitializedCarOwnerUsingValue() *CarOwner {
	car := _wireCarValue
	owner := _wireOwnerValue
	carOwner := &CarOwner{
		Car:   car,
		Owner: owner,
	}
	return carOwner
}

var (
	_wireCarValue   = carValue
	_wireOwnerValue = ownerValue
)

func InitializedReader() io.Reader {
	reader := _wireFileValue
	return reader
}

var (
	_wireFileValue = os.Stdin
)

// cara membuat provider Configuration secara otomatis
func InitializedConfiguration() *Configuration {
	application := NewApplication()
	configuration := application.Configuration
	return configuration
}

func InitializedConnection(name string) (*Connection, func()) {
	file, cleanup := NewFile(name)
	connection, cleanup2 := NewConnection(file)
	return connection, func() {
		cleanup2()
		cleanup()
	}
}

// injector.go:

var carSet = wire.NewSet(NewCarRepository, NewCarService)

var ownerSet = wire.NewSet(NewOwnerRepository, NewOwnerService)

var HelloSet = wire.NewSet(
	NewSayHelloImpl, wire.Bind(new(SayHello), new(*SayHelloImpl)),
)

var CarOwnerSet = wire.NewSet(
	NewCar,
	NewOwner,
)

var carValue = &Car{}

var ownerValue = &Owner{}
